import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, types, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ContentTypes
from pycbrf import ExchangeRates
import re

from mywallet.keyboardsfinance import kbstart, kbadvice, kbwallet, kbmul, kbback, kbvid
from config import tokenwall, paytoken

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=tokenwall, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

def compinterest(a):
    n = int(a[0])
    m = int(a[1])
    c = int(a[2])
    b = int(a[3])
    for i in range(n):
        m = m * (1 + b/100)
        m += c * 12
    return round(m, 2)



class Expenses(StatesGroup):
    summ_source = State()

class Income(StatesGroup):
    summ_income = State()

class Goals(StatesGroup):
    goal_name = State()

class MyGoal(StatesGroup):
    goal_add = State()

class CompInt(StatesGroup):
    add_sum = State()

class Suggest(StatesGroup):
    sug_sum = State()

class Subscribe(StatesGroup):
    subs = State()

class CheckOps(StatesGroup):
    output = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    id1 = int(message.from_user.id)
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS expenses1(id INTEGER, expenses INTEGER, source, date)")
    cursor.execute("CREATE TABLE IF NOT EXISTS income1(id INTEGER, income INTEGER, source, date)")
    cursor.execute("CREATE TABLE IF NOT EXISTS goals(id INTEGER UNIQUE, summ INTEGER, goal, current)")
    cursor.execute("CREATE TABLE IF NOT EXISTS subscribers(id)")
    user = cursor.execute(f"SELECT id FROM expenses1 WHERE id = {id1}").fetchone()
    if not user:
        data = [id1, 0, None, None]
        cursor.execute("INSERT OR IGNORE INTO expenses1 VALUES(?, ?, ?, ?)", data)
        cursor.execute("INSERT OR IGNORE INTO income1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ MyWallet. –£ –º–µ–Ω—è –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?',
                         reply_markup=kbstart)

@dp.message_handler(text=["üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", "/income"], state=None)
async def addinc(message: types.Message):
    await Income.summ_income.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞")

@dp.message_handler(lambda message: not bool(re.search('^[0-9]', message.text)), state=Income.summ_income)
async def suminc(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞")

@dp.message_handler(lambda message: message.text, state=Income.summ_income)
async def suminc(message:types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = int(message.from_user.id)
    s = message.text.split()
    date1 = message.date.strftime("%d.%m")
    if len(s) == 2:
        exp = s[0]
        source = str(s[-1])
        data = [id1, exp, source, date1]
        cursor.execute("INSERT OR IGNORE INTO income1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    elif len(s) == 1:
        exp = s[0]
        data = [id1, exp, None, date1]
        cursor.execute("INSERT OR IGNORE INTO income1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    elif len(s) > 2:
        exp = s[0]
        source = str(" ".join(s[1::]))
        data = [id1, exp, source, date1]
        cursor.execute("INSERT OR IGNORE INTO income1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    await Income.next()

@dp.message_handler(text=["üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "/expenses"], state=None)
async def addexp(message:types.Message):
    await Expenses.summ_source.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞')

@dp.message_handler(lambda message: not bool(re.search('^[0-9]', message.text)), state=Expenses.summ_source)
async def sumexp(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞")

@dp.message_handler(lambda message: message.text, state=Expenses.summ_source)
async def sumexp(message:types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = int(message.from_user.id)
    s = message.text.split()
    date1 = message.date.strftime("%d.%m")
    if len(s) == 2:
        exp = s[0]
        source = str(s[-1])
        data = [id1, exp, source, date1]
        cursor.execute("INSERT OR IGNORE INTO expenses1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    elif len(s) == 1:
        exp = s[0]
        data = [id1, exp, None, date1]
        cursor.execute("INSERT OR IGNORE INTO expenses1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    elif len(s) > 2:
        exp = s[0]
        source = str(" ".join(s[1::]))
        data = [id1, exp, source, date1]
        cursor.execute("INSERT OR IGNORE INTO expenses1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    await Expenses.next()


@dp.message_handler(text=['üí° –°–æ–≤–µ—Ç—ã', '/advice', 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–≤–µ—Ç–∞–º'])
async def advice(message: types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    user = cursor.execute(f"SELECT * FROM subscribers WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ª—É—á—à–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. –û–∑–Ω–∞–∫–æ–º–∏–≤—à–∏—Å—å —Å –Ω–∏–º–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ!',
            reply_markup=kbadvice)
    else:
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription")


@dp.message_handler(text=['üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫', '/wallet'])
async def wallet(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kbwallet)


@dp.message_handler(text=['üìö –õ—É—á—à–∏–µ –∫–Ω–∏–≥–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º', '/books'])
async def books(message:types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    user = cursor.execute(f"SELECT * FROM subscribers WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            "1. <b>–î–∂–æ—Ä–¥–∂ –ö–ª–µ–π—Å–æ–Ω, ¬´–°–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –í–∞–≤–∏–ª–æ–Ω–µ¬ª.</b>\n\n2. <b>–†–æ–±–µ—Ä—Ç –ö–∏–π–æ—Å–∞–∫–∏, ¬´–ë–æ–≥–∞—Ç—ã–π –ø–∞–ø–∞, –±–µ–¥–Ω—ã–π –ø–∞–ø–∞¬ª.</b>\n\n3. <b>–ë–æ–¥–æ –®–µ—Ñ–µ—Ä, ¬´–ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ¬ª.</b>\n\n4. <b>–ù–∞–ø–æ–ª–µ–æ–Ω –•–∏–ª–ª, ¬´–î—É–º–∞–π –∏ –±–æ–≥–∞—Ç–µ–π¬ª.</b>\n\n5. <b>–†–æ–±–µ—Ä—Ç –ö–∏–π–æ—Å–∞–∫–∏ ¬´–ö–≤–∞–¥—Ä–∞–Ω—Ç –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞¬ª.</b>",
            reply_markup=kbback)
    else:
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription")

@dp.message_handler(text=["üì∫ –ü–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º", '/videos'])
async def video(message: types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    user = cursor.execute(f"SELECT * FROM subscribers WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            "1. <b>4 –ü—Ä–∞–≤–∏–ª–∞ –ê–±—Å–æ–ª—é—Ç–Ω–æ–π –§–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏</b>\n\n2. <b>–ö–∞–∫ –°—Ç–∞—Ç—å –§–∏–Ω–∞–Ω—Å–æ–≤–æ –ì—Ä–∞–º–æ—Ç–Ω—ã–º?</b>\n\n3. <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –∑–∞ 6 –ú–∏–Ω—É—Ç</b>\n\n4. <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: –ö–æ–Ω—Ç—Ä–æ–ª—å –§–∏–Ω–∞–Ω—Å–æ–≤ –∏ –í–µ–¥–µ–Ω–∏–µ –ë—é–¥–∂–µ—Ç–∞</b>\n\n5. <b>11 –§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ü—Ä–∏–≤—ã—á–µ–∫, –ö–æ—Ç–æ—Ä—ã–µ –°–¥–µ–ª–∞–ª–∏ –ú–µ–Ω—è –ú–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º</b>",
            reply_markup=kbvid)
    else:
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription")

@dp.message_handler(text=['üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞'])
async def fmoney(message: types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    user = cursor.execute(f"SELECT * FROM subscribers WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            "1. –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏\n\n2. –ù–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏ /wallet\n\n3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç 3 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤\n\n4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ü–µ–ª—å—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö",
            reply_markup=kbback)
    else:
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription")

@dp.message_handler(text=['üìä –ü—Ä–∏—É–º–Ω–æ–∂–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞'])
async def multiply(message: types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    user = cursor.execute(f"SELECT * FROM subscribers WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            "1. <b>–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç</b>\n2. <b>–î–µ–ø–æ–∑–∏—Ç</b>\n3. <b>–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É</b>\n4. <b>–ê–∫—Ü–∏–∏</b>\n5. <b>–û–±–ª–∏–≥–∞—Ü–∏–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–π–º–∞</b>\n6. <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç</b>\n7. <b>ETF-—Ñ–æ–Ω–¥—ã</b>",
            reply_markup=kbmul)
    else:
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription")

@dp.callback_query_handler(text='1')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Å—á—ë—Ç, –∞ –±–∞–Ω–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç –≤–∞–º –Ω–∞ –Ω–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ–∫–∞ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –µ–≥–æ —É—Å–ª—É–≥–∞–º–∏. –ü—Ä–∏ —ç—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ—Ç. –ù–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±—ã—á–Ω–æ –Ω–µ–≤—ã—Å–æ–∫–∏–π.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –æ—Ç –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.\n\n<b>–†–∏—Å–∫–∏:</b> –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–∞–∫–∏—Ö, –µ—Å–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–∞–Ω–∫ –∏ –Ω–µ –¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥—É –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='2')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–í—ã –∫–ª–∞–¥—ë—Ç–µ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–µ –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É. –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç, —á—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≥–æ–¥ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫ –≤—ã–≥–æ–¥–Ω–µ–µ, —á–µ–º –Ω–∞ –ø–æ–ª–≥–æ–¥–∞, –Ω–æ –º–µ–Ω–µ–µ –≤—ã–≥–æ–¥–Ω–æ, —á–µ–º –Ω–∞ –ø–æ–ª—Ç–æ—Ä–∞.\n\n–î–æ—Ö–æ–¥—ã –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞ –º–æ–∂–Ω–æ –æ–±–Ω–∞–ª–∏—á–∏–≤–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏–ª–∏ –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ, –∏ –∑–∞—Ç–µ–º –Ω–∞ –Ω–∏—Ö —Ç–æ–∂–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –æ—Ç –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, –Ω–æ –≤—ã–≥–æ–¥–Ω–µ–µ –≤—ã–±–∏—Ä–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n<b>–†–∏—Å–∫–∏:</b> –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–∞–∫–∏—Ö, –µ—Å–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–∞–Ω–∫ –∏ –Ω–µ –¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥—É –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='3')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ–º—É, —á—Ç–æ —ç—Ç–æ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è. –ü–æ–∫—É–ø–∞–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ 2 –º–∏–ª–ª–∏–æ–Ω–∞ –∏ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –±–µ–∑ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –≤ 20 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 8 –ª–µ—Ç.\n\n–ù–æ –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞. –ü—Ä–∞–≤–¥–∞, –¥–∞–Ω–Ω—ã–µ –†–æ—Å—Å—Ç–∞—Ç–∞ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –≥–æ–¥–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —ç–ª–∏—Ç–Ω—ã—Ö. –î–æ —ç—Ç–æ–≥–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–æ—Å–ª–∞ –≤ —Ü–µ–Ω–µ.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –ø–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏ ‚Äî —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ‚Äî —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç, –Ω–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å.\n\n<b>–†–∏—Å–∫–∏:</b> –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –µ—Å–ª–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='4')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–ü—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∞–∫—Ü–∏–∏ –µ—Å—Ç—å —Å–º—ã—Å–ª –Ω–µ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤—Å–µ —è–π—Ü–∞ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. –≠—Ç–æ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å—Ç–∏ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ —Ä–µ–∑–∫–æ –ø–æ–π–¥—ë—Ç –≤–Ω–∏–∑.\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –±—Ä–æ–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—Å –Ω–∞ –±–∏—Ä–∂–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —É –Ω–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Ç –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ (–¥–æ 2013 –≥–æ–¥–∞ ‚Äî –æ—Ç –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä—ã–Ω–∫–∞–º), –∞ —É –µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–∏.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> —á–µ—Ä–µ–∑ –≥–æ–¥ ‚Äî –ø–æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º, –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏.\n\n<b>–†–∏—Å–∫–∏:</b> –≤—ã—Å–æ–∫–∏–µ, –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='5')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–û–±–ª–∏–≥–∞—Ü–∏–∏ ‚Äî –¥–æ–ª–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é. –í —Å–ª—É—á–∞–µ —Å –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–π–º–∞ (–û–§–ó) –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –±–µ—Ä—ë—Ç —É –≤–∞—Å –≤–∑–∞–π–º—ã, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏. –†—ã–Ω–æ—á–Ω—ã–µ –û–§–ó –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É –±—Ä–æ–∫–µ—Ä–∞. –ò—Ö —Å—Ä–æ–∫ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞–¥–æ —É—Ç–æ—á–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–ø—É—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.\n\n–í 2017 –≥–æ–¥—É –ú–∏–Ω—Ñ–∏–Ω –≤—ã–ø—É—Å—Ç–∏–ª¬´–Ω–∞—Ä–æ–¥–Ω—ã–µ¬ª –æ–±–ª–∏–≥–∞—Ü–∏–∏, –∫—É–ø–∏—Ç—å –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤ –í–¢–ë –∏ –°–±–µ—Ä–±–∞–Ω–∫–µ, –Ω–æ –∏ –ø—Ä–æ–¥–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º –∂–µ. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞—è–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤ 8,5% –≥–æ–¥–æ–≤—ã—Ö –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ 3 –≥–æ–¥–∞. –ü–æ —Ç—Ä—ë—Ö–ª–µ—Ç–Ω–∏–º –¥–µ–ø–æ–∑–∏—Ç–∞–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 4,85%.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏.\n\n<b>–†–∏—Å–∫–∏:</b> –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–∞–∫–∏—Ö, –µ—Å–ª–∏ –≤—ã –Ω–µ –∂–¥—ë—Ç–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='6')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ (–ò–ò–°) –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ 2015 –≥–æ–¥—É –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏—è–Ω –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏. –í—ã –∑–∞—á–∏—Å–ª—è–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ –¥–µ–Ω—å–≥–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ä—É–±–ª—è—Ö, –Ω–æ –Ω–µ –±–æ–ª–µ–µ –º–∏–ª–ª–∏–æ–Ω–∞ –≤ –≥–æ–¥, –∏ –º–æ–∂–µ—Ç–µ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –∞–∫—Ü–∏–∏ –∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏.\n\n–° –Ω–∏–º–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –ò–ò–° –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –Ω—ë–º –¥–µ–Ω—å–≥–∏ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –¥–æ 52 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –µ–∂–µ–≥–æ–¥–Ω–æ.\n\n<b>–°—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –æ—Ç —Ç—Ä—ë—Ö –ª–µ—Ç; –µ—Å–ª–∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–Ω—å—à–µ, –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –ø—Ä–∏–¥—ë—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å.\n\n<b>–†–∏—Å–∫–∏:</b> –≤—ã—à–µ, —á–µ–º —É –¥–µ–ø–æ–∑–∏—Ç–∞, –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∏–∑–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç –Ω–µ —Å—Ç—Ä–∞—Ö—É–µ—Ç—Å—è –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ–º –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤–∫–ª–∞–¥–æ–≤.",
                           reply_markup=kbback)


@dp.callback_query_handler(text='7')
async def q(cb: types.Message):
    await bot.send_message(cb.from_user.id,
                           "–í–∫–ª–∞–¥—ã–≤–∞—è –¥–µ–Ω—å–≥–∏ –≤ –±–∏—Ä–∂–µ–≤–æ–π —Ñ–æ–Ω–¥, –≤—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ –¥–æ–ª—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –µ–º—É –Ω–∞–±–æ—Ä–∞ –∞–∫—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π. –≠—Ç–æ –≤–ø–æ–ª–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –æ —Ä–∞–∑–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö, –Ω–æ –æ–±–ª–µ–≥—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–Ω–≤–µ—Å—Ç–æ—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç.\n\n–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–ø–∞–Ω–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ ETF-—Ñ–æ–Ω–¥–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤, —á—Ç–æ –≤–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥.\n\n<b>–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:</b> –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ —Ñ–æ–Ω–¥–∞.\n\n<b>–†–∏—Å–∫–∏:</b> —á–µ–º –±–æ–ª—å—à–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å, —Ç–µ–º –º–µ–Ω—å—à–µ —Ä–∏—Å–∫–∏.")



@dp.message_handler(text=['üí≥ –ë–∞–ª–∞–Ω—Å', '/balance'])
async def balance(message: types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    exp1 = str(cursor.execute(f"SELECT SUM(expenses) FROM expenses1 WHERE id = {id1}").fetchall())[2:-3]
    inc1 = str(cursor.execute(f"SELECT SUM(income) FROM income1 WHERE id = {id1}").fetchall())[2:-3]
    if not inc1.isdigit():
        inc1 = '0'
    if not exp1.isdigit():
        exp1 = '0'
    dif = int(inc1) - int(exp1)
    await message.answer(f'–ë–∞–ª–∞–Ω—Å: <b>{dif}</b>\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{inc1}</b>\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: <b>{exp1}</b>')
    if dif < 0:
        await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Å–æ–≤–µ—Ç—É–µ–º –≤–∞–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ")


@dp.message_handler(text=['/back', '/menu', 'üîô –ù–∞–∑–∞–¥'])
async def back(message: types.Message):
    await message.answer("–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kbstart)

@dp.message_handler(text=['/mygoal', 'üéØ –ú–æ—è —Ü–µ–ª—å'])
async def mygoals(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS goals(id INTEGER UNIQUE, summ INTEGER, goal)")
    user = cursor.execute(f"SELECT * FROM goals WHERE id = {id1}").fetchall()
    if user:
        summ = int(str(cursor.execute(f"SELECT summ FROM goals WHERE id = {id1}").fetchone())[1:-2])
        name = str(cursor.execute(f"SELECT goal FROM goals WHERE id = {id1}").fetchone())[2:-3]
        stroka = ''
        cursum = int(str(cursor.execute(f"SELECT current FROM goals WHERE id = {id1}").fetchone())[1:-2])
        if summ <= cursum:
            await message.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—é —Ü–µ–ª—å. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥")
            await message.answer(f"{'üü©' * 10} 100%")
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /cleargoals –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /goals.")
        else:
            eq = int((cursum/summ)*100)
            sq_length = eq//10

            if cursum <= 0:
                stroka = "‚¨ú" * 10
            elif sq_length >= 0 and sq_length < 3:
                if int(str(eq)[-1]) >= 1:
                    stroka += 'üü•' * (sq_length+1)
                    stroka += "‚¨ú" * (9 - sq_length)
                else:
                    stroka += 'üü•' * sq_length
                    stroka += "‚¨ú" * (10-sq_length)

            elif sq_length >= 3 and sq_length < 8:
                if int(str(eq)[-1]) >= 5:
                    stroka += 'üüß' * (sq_length+1)
                    stroka += "‚¨ú" * (9 - sq_length)
                else:
                    stroka += 'üüß' * sq_length
                    stroka += "‚¨ú" * (10-sq_length)

            elif sq_length >= 8 and sq_length < 10:
                stroka += "üü©" * sq_length
                stroka += "‚¨ú" * (10 - sq_length)

            await message.answer(f"–í–∞—à–∞ —Ü–µ–ª—å: {name} –∑–∞ {summ} ‚ÇΩ")
            await message.answer(f"–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: {summ - cursum} ‚ÇΩ")
            await message.answer(f"{stroka} {eq}%")
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë c –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /goals")


@dp.message_handler(text=['addtogoal', 'üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ü–µ–ª–∏'], state=None)
async def addtogoal(message:types.Message):
    await MyGoal.goal_add.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—é —Ü–µ–ª—å")

@dp.message_handler(lambda message:message.text.isdigit(), state=MyGoal.goal_add)
async def addgoal(message:types.Message):
    id1 = message.from_user.id
    summ = message.text
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    user = cursor.execute(f"SELECT * FROM goals WHERE id = {id1}").fetchall()
    if user:
        goalname = str(cursor.execute(f"SELECT goal FROM goals WHERE id = {id1}").fetchone())[1:-2]
        date1 = message.date.strftime("%d.%m")
        conn = sqlite3.connect('final1db.db')
        cursor = conn.cursor()
        cursum = int(str(cursor.execute(f"SELECT current FROM goals WHERE id = {id1}").fetchone())[1:-2])
        cursum += int(summ)
        cursor.execute(f"UPDATE goals SET current = {cursum} WHERE id = {id1}")
        data = [id1, summ, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ {goalname} ", date1]
        cursor.execute("INSERT OR IGNORE INTO expenses1 VALUES(?, ?, ?, ?)", data)
        conn.commit()
        await message.answer(f"–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å —Ü–µ–ª–∏ '{goalname}' –Ω–∞ {summ} ‚ÇΩ")
    else:
        await message.answer(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /goals")
    await MyGoal.next()

@dp.message_handler(lambda message: not message.text.isdigit(), state=MyGoal.goal_add)
async def check(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message_handler(commands='allincome')
async def allin(message:types.Message):
    id1 = int(message.from_user.id)
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM income1 WHERE income = 0")
    conn.commit()
    pres = cursor.execute(f"SELECT * FROM income1 WHERE id = {id1}").fetchall()
    if pres:
        inc1 = cursor.execute(f"SELECT * FROM income1 WHERE id = {id1}").fetchall()
        for i in range(len(inc1)):
            await message.answer(inc1[i][1::])
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –¥–æ—Ö–æ–¥—ã, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /income")

@dp.message_handler(commands='allexpenses')
async def allex(message:types.Message):
    id1 = int(message.from_user.id)
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM expenses1 WHERE expenses = 0")
    conn.commit()
    pres = cursor.execute(f"SELECT * FROM expenses1 WHERE id = {id1}").fetchall()
    if pres:
        exp1 = cursor.execute(f"SELECT * FROM expenses1 WHERE id = {id1}").fetchall()
        for i in range(len(exp1)):
            await message.answer(exp1[i][1::])
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /expenses")

@dp.message_handler(text=['üìù –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å', '/goals'], state=None)
async def addgoal(message:types.Message):
    await Goals.goal_name.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")

@dp.message_handler(lambda message: not bool(re.search('^[0-9]', message.text)), state=Goals.goal_name)
async def goal(message:types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")

@dp.message_handler(lambda message:message.text, state=Goals.goal_name)
async def goal(message:types.Message):
    id1 = int(message.from_user.id)
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    goalinfo = message.text.split()
    user = cursor.execute(f"SELECT id FROM goals WHERE id = {id1}").fetchone()
    if user:
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å, –º—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ—Å—Ç–∏—á—å –µ—ë –ø–µ—Ä–µ–¥ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –∫ –µ—â—ë –æ–¥–Ω–æ–π")
    else:
        if not goalinfo:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ —Ü–µ–ª—å –ø–æ—Å–ª–µ /goals")
        else:
            if len(goalinfo) == 2:
                summ = goalinfo[0]
                goal = str(goalinfo[-1])
                data = [id1, summ, goal, 0]
                cursor.execute("INSERT OR IGNORE INTO goals VALUES(?, ?, ?, ?)", data)
                conn.commit()
            elif len(goalinfo) == 1:
                summ = goalinfo[0]
                data = [id1, summ, None, 0]
                cursor.execute("INSERT OR IGNORE INTO goals VALUES(?, ?, ?, ?)", data)
                conn.commit()
            elif len(goalinfo) > 2:
                summ = goalinfo[0]
                goal = str(" ".join(goalinfo[1::]))
                data = [id1, summ, goal, 0]
                cursor.execute("INSERT OR IGNORE INTO goals VALUES(?, ?, ?, ?)", data)
                conn.commit()
            await message.answer("–í—ã  —Å–æ–∑–¥–∞–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥")
    await Goals.next()

@dp.message_handler(commands='cleargoals')
async def clear(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM goals WHERE id = {id1}")
    conn.commit()
    await message.answer("–í–∞—à–∞ —Ü–µ–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")


@dp.message_handler(commands='help')
async def help(message:types.Message):
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @amirakhmetov, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–≤ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É")


@dp.message_handler(text=["üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç", "/currencies"])
async def message(message: types.Message):
    rates = ExchangeRates(datetime.now())
    await bot.send_photo(chat_id=message.from_user.id, photo="https://yamal-media.ru/images/insecure/rs:fill-down:1080:608/aHR0cHM6Ly8yNTc4/MjQuc2VsY2RuLnJ1/L3lhbWFsbmV3cy9m/NDI1NTVkNi1kNzIu/d2VicA.jpg", caption=f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å:\n\n\n<b>$</b> –î–æ–ª–ª–∞—Ä –°–®–ê - <b>{rates['USD'][4]}‚ÇΩ</b>\n<b>‚Ç¨</b> –ï–≤—Ä–æ - <b>{rates['EUR'][4]}‚ÇΩ</b>\n<b>¬•</b> –Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞ - <b>{rates['JPY'][4]/100}‚ÇΩ</b>\n<b>‚Ç£</b> –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫ - <b>{rates['CHF'][4]}‚ÇΩ</b>\n<b>Kƒç</b> –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞ - <b>{rates['CZK'][4]/10}‚ÇΩ</b>\n<b>‚Ç∫</b> –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞ - <b>{rates['TRY'][4]/10}‚ÇΩ</b>\n<b>¬•</b> –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å - <b>{rates['CNY'][4]}‚ÇΩ</b>\n<b>¬£</b> –§—É–Ω—Ç –°—Ç–µ—Ä–ª–∏–Ω–≥–∞ - <b>{rates['GBP'][4]}‚ÇΩ</b>")

@dp.message_handler(text=["/games", "üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º"])
async def games(message:types.Message):
    await message.answer("1. <b>–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ ¬´–ù–µ –≤ –¥–µ–Ω—å–≥–∞—Ö —Å—á–∞—Å—Ç—å–µ¬ª</b>\n\n2. <b>–û–Ω–ª–∞–π–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ ¬´–°–º–µ—à–∞—Ä–∏–∫–∏ –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤¬ª</b>\n\n3. <b>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞ ¬´–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤¬ª</b>\n\n4. <b>–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –∫–≤–µ—Å—Ç-–∏–≥—Ä–∞ ¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –±—É–¥–Ω–∏¬ª</b>\n\n5. <b>–î–µ–ª–æ–≤–∞—è –∏–≥—Ä–∞ ¬´–£—Å–ª—É–≥–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π¬ª</b>\n\n6. <b>–ë–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä ¬´–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏¬ª</b>\n\n7. <b>–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ ¬´–ú–æ–Ω–æ–ø–æ–ª–∏—è¬ª</b>", reply_markup=kbback)

@dp.message_handler(text=['/clearincome', 'üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤'])
async def clearinc(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM income1 WHERE id = {id1}")
    conn.commit()
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")

@dp.message_handler(text=['/clearexpenses', 'üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤'])
async def clearinc(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM expenses1 WHERE id = {id1}")
    conn.commit()
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")

@dp.message_handler(commands='compound', state=None)
async def compint(message:types.Message):
    await CompInt.add_sum.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ –ª–µ—Ç, —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≥–æ–¥–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")

@dp.message_handler(lambda message:message.text, state=CompInt.add_sum)
async def addd(message:types.Message):
    comp = message.text.split()
    finalcap = compinterest(comp)
    await message.answer(f"–ß–µ—Ä–µ–∑ {comp[0]} –ª–µ—Ç —É –≤–∞—Å –±—É–¥–µ—Ç <b>{finalcap} ‚ÇΩ</b>")
    await CompInt.next()

@dp.message_handler(commands='suggestion', state=None)
async def sug(message:types.Message):
    await Suggest.sug_sum.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É")

@dp.message_handler(lambda message:message.text, state=Suggest.sug_sum)
async def salarylvl(message:types.Message):
    salary = int(message.text)
    await message.answer(f"–û—Ç–ª–æ–∂–∏—Ç–µ:\n\n<b>{salary/5}</b> –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–µ—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ –æ—Ç–∫–ª–æ–∂–∏—Ç—å {salary/5}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ª–æ–∂–∏—Ç—å {salary/10})\n\n<b>{salary/2}</b> –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–µ–¥–∞, –∂–∏–ª—å–µ, –ø—Ä–æ–µ–∑–¥)\n\n<b>{salary*0.3}</b> –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ—Ç–µ–ª–∫–∏")
    await Suggest.next()

@dp.message_handler(text=["/subscription", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"])
async def newsub(message:types.Message):
    await bot.send_invoice(message.from_user.id,
                           title='–ü–æ–¥–ø–∏—Å–∫–∞ My Wallet',
                           description='–≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞—à–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–∞–º, –∞ —Ç–∞–∫–∂–µ —Ä–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º',
                           payload=123,
                           provider_token=paytoken,
                           currency='RUB',
                           start_parameter='test_bot',
                           prices=[types.LabeledPrice('–†—É–±', 99_00)])

@dp.pre_checkout_query_handler()
async def proccess_pre_checkout_query(query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def subsc(message:types.SuccessfulPayment):
    id1 = message.from_user.id
    await bot.send_message(chat_id=message.from_user.id, text="–í—ã –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!")
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO subscribers VALUES(?)", (id1,))
    conn.commit()

@dp.message_handler(text=["–ù–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é", '/findop'])
async def findop(message:types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é (–≤ –≤–∏–¥–µ dd.mm, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12)')
    await CheckOps.output.set()

@dp.message_handler(commands='cancel', state=CheckOps.output)
async def cancel(message:types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kbstart)
    await CheckOps.next()

# @dp.message_handler(regexp='\d\d\\.\d\d')
@dp.message_handler(lambda message: bool(re.match('\d\d\\.\d\d', message.text)), state=CheckOps.output)
async def check(message:types.Message):
    conn = sqlite3.connect('final1db.db')
    cursor = conn.cursor()
    id1 = message.from_user.id
    text1 = message.text
    exp_op = cursor.execute(f"SELECT * FROM expenses1 WHERE id = {id1} AND date = {text1}").fetchall()
    inc_op = cursor.execute(f"SELECT * FROM income1 WHERE id = {id1} AND date = {text1}").fetchall()
    if len(exp_op) > 0:
        exp_list = ''
        exp_list += '<b>–†–∞—Å—Ö–æ–¥—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å</b>\n'
        for i in exp_op:
            exp_list += f'{i[1]} ‚ÇΩ - {i[2]}\n'
        await message.answer(exp_list)
    else:
        await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å</b>")

    if len(inc_op) > 0:
        inc_list = ''
        inc_list += '<b>–î–æ—Ö–æ–¥—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å</b>\n'
        for i in inc_op:
            inc_list += f'{i[1]} ‚ÇΩ - {i[2]}\n'
        await message.answer(inc_list)
    else:
        await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å</b>")
    await CheckOps.next()

@dp.message_handler(lambda message: not bool(re.match('\d\d\\.\d\d', message.text)), state=CheckOps.output)
async def check(message:types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm (31.12)')



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
